library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
View(arbuthnot)
dim(arbuthnot)
names(arbuthnot)
nrows(arbuthnot)
nrow(arbuthnot)
arbuthnot$year[1]
arbuthnot$year[82]
ggplot(data = arbuthnot, aes(x = year, y = girls)) + geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = prop_boys)) +
+   geom_line()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = prop_boys)) + geom_line()
names(arbuthnot)
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
data(present)
length(present)
range(present$year)
names(present)
present <- present %>% mutate(total = boys + girls)
present <- present %>% mutate(prop_boys = boys/total)
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = prsent, aes(x = year, y = prop_boys)) + geom_line() + geom_points()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_line() + geom_points()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_line() + geom_point()
present <- present %>% mutate(more_boys = boys > girls)
any(girls > boys, na.rm = FALSE)
with(present, any(girls > boys, na.rm = FALSE))
present <- present %>% mutate(prop_boy_girl = boys/girls)
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys_girls)) + geom_line() + geom_point()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = present, aes(x = year, y = prop_boys_girl)) + geom_line() + geom_point()
present <- present %>% mutate(prop_boy_girl = boys/girls)
namse(present)
names(present)
ggplot(data = present, aes(x = year, y = prop_boys)) + geom_line() + geom_point()
ggplot(data = present, aes(x = year, y = prop_boy_girl)) + geom_line() + geom_point()
order(present, decreasing = FALSE)
with(present, order(total, decreasing = FALSE))
indices <- with(present, order(total, decreasing = FALSE))
present[indices]
present[indices, year]
present[indices, years]
present$year[indices]
library(statsr)
library(dplyr)
library(ggplot2)
data("nycflights")
names(nycflights)
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay))
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 150)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
rdu_flights <- nycflights %>% filter(dest = "RDU")
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
View(nycflights)
ggplot(data =  sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_ad = median(arr_delay), IQR_ad = IQR() )
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay))
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay)) %>% arrange(desc(arr_delay))
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_ad = median(arr_delay), IQR_ad = IQR(arr_delay)) %>% arrange(desc(IQR_ad))
View(nycflights)
nyc_flights <- nycflights %>% mutate(avg_speed = distance/air_time)
nyc_flights %>% arrange(desc(avg_speed)) %>% select(avg_speed, tailnum)
ggplot(data = nycflights, aes(avg_speed, distance)) + geom_point()
ggplot(data = nycflights, aes(x = avg_speed, y = distance)) + geom_point()
names(nycflights)
ggplot(data = nyc_flights, aes(avg_speed, distance)) + geom_point()
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% summarise(sum(arr_delay == "on time")/(nrow(nyc_flights)))
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")/(nrow(nyc_flights)))
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/(nrow(nyc_flights)))
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type)
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/(32735)
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/(32735)
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/(32735))
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0/
sas
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay == "on time")*1.0)
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay)*1.0)
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type) %>% summarise(sum(arr_delay))
nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type)
nyc_flights <- nyc_flights %>% mutate(arr_type = if_else(arr_delay < 0, "on time", "delayed"), del_type = if_else(dep_delay > 0, "delayed", "on time")) %>% group_by(del_type)
View(nyc_flights)
nyc_flights %>% summarise(sum(arr_type == "on time"))
nyc_flights %>% summarise(sum(arr_type == "on time")/32735)
library(statsr)
library(dplyr)
library(ggplot2)
data("kobe_basket")
kobe_streak <- calc_streak(kobe_basket$shot)
View(nyc_flights)
View(nyc_flights)
View(nyc_flights)
ls()
rm(list = ls())
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
median(length)
median(kobe_streak)
median(kobe_streak$length)
IQR(kobe_streak$length)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE, prob = c(0.2,0.8))
table(sim_unfair_coin)
shot_outcomes <- c("H","M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
sim_basket <- sample(shot_outcomes, prob = c(0.45,0.55), size = 133, replace = TRUE)
table((sim_basket))
sim_streak <- calc_streak(sim_basket)
ggplot(data = sim_streak, aes(x = length)) + geom_histogram(binwidth = 1)
median(sim_streak)
median(sim_streak$length)
mode(sim_streak$length)
max(sim_streak$length)
ls
pwd
hist(runif(1000))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: parameters
lambda <- 0.2
n = 40
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
hist(mns)
lambda <- 0.2
n = 40
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
hist(mns)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
geom_histogram(data = mns, fill = "red", alpha = 0.2) +
geom_histogram(data= pop_distribution, fill = "blue", alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
ggplot() + geom_histogram(data = mns, fill = "red", alpha = 0.2) +
geom_histogram(data= pop_distribution, fill = "blue", alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
ggplot() + geom_histogram(data = mns, fill = "red", alpha = 0.2) + geom_histogram(data= pop_distribution, fill = "blue", alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
lambda <- 0.2
n = 40
mns = NULL
pop_distribution = NULL
for (i in 1 : 1000) pop_distribution = c(pop_distribution, mean(rexp(1, lambda)))
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("value")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("value")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
lambda <- 0.2
n = 40
mns = NULL
pop_distribution = NULL
for (i in 1 : 1000) pop_distribution = c(pop_distribution, mean(rexp(1, lambda)))
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("value")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("value")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
n_1_samples
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("values")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("values")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2)
library(ggplot2)
#hist(mns)
#hist(pop_distribution)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(mean_theory)
mean_simulation <- mean(mns)
mean_theory <- 1/lambda
difference <- mean_theory - mean_simulation
difference
var_theory <- 1/lambda**2
var_simulation <- var(mns)
library(ggplot2)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(mean_theory)
library(ggplot2)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("dist")
n_1_samples <- data.frame(pop_distribution)
names(n_1_samples) = c("dist")
n_40_samples$dis <- "Gaussian"
n_1_samples$dis <- "Exponential"
distributions <- rbind(n_40_samples, n_1_samples)
ggplot(distributions, aes(dist, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(xintercept = mean_theory)
mean_simulation <- mean(mns)
mean_theory <- 1/lambda
difference <- mean_theory - mean_simulation
difference
library(ggplot2)
n_40_samples <- data.frame(mns)
names(n_40_samples) = c("values")
n_40_samples$dis <- "Gaussian"
ggplot(n_40_samples, aes(values, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(xintercept = c(mean_theory, mean_simulation))
var_theory <- 1/lambda**2
var_simulation <- var(mns)
error_bars_sim <- mean_simulation + c(-1,1)*sqrt(var_simulation)
ggplot(n_40_samples, aes(values, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(xintercept = error_bars_sim)
difference_var <- var_theory - var_simulation
difference_var
difference_var <- var_theory - var_simulation
var_theory
difference_var <- var_theory - var_simulation
var_theory
var_simulation
var_theory <- 1/lambda**2/40
var_simulation <- var(mns)
error_bars_sim <- mean_simulation + c(-1,1)*sqrt(var_simulation)
ggplot(n_40_samples, aes(values, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(xintercept = error_bars_sim)
difference_var <- var_theory - var_simulation
difference_var
var_theory <- 1/lambda**2/40
var_simulation <- var(mns)
error_bars_sim <- mean_simulation + c(-1,1)*sqrt(var_simulation)
error_bars_theory <- mean_simulation + c(-1,1)*sqrt(var_theory)
ggplot(n_40_samples, aes(values, fill = dis)) + geom_density(alpha = 0.2) + geom_vline(xintercept = c(error_bars_sim, error_bars_theory))
summary(ToothGrowth)
head(ToothGrowth)
table(ToothGrowth$supp)
str(ToothGrowth)
hist(dose)
hist(ToothGrowth$dose)
summary(ToothGrowth)
str(ToothGrowth)
OJ <- ToothGrowth %>% filter(supp=="OJ") %>% select(len)$len
VC <- ToothGrowth %>% filter(supp=="VC") %>% select(len)$len
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
OJ <- ToothGrowth %>% filter(supp=="OJ") %>% select(len)$len
VC <- ToothGrowth %>% filter(supp=="VC") %>% select(len)$len
OJ <- ToothGrowth %>% filter(supp=="OJ") %>% select(len)
VC <- ToothGrowth %>% filter(supp=="VC") %>% select(len)
doses <- ToothGrowth %>% group_by(dose)
head(doses)
doses <- ToothGrowth %>% separate(dose)
doses <- ToothGrowth %>% split(dose)
doses <- split(ToothGrowth, ToothGrowth$dose)
t.test(VC,OJ,alternative="two.sided",var.equal=FALSE)
t.test(VC,OJ,alternative="two.sided",var.equal=FALSE)$p-value
t.test(VC,OJ,alternative="two.sided",var.equal=FALSE)
t.test(doses[[1]]$len,doses[[3]]$len,alternative="two.sided",var.equal=FALSE)
t.test(doses[[2]]$len,doses[[3]]$len,alternative="two.sided",var.equal=FALSE)
t.test(doses[[1]]$len,doses[[2]]$len,alternative="two.sided",var.equal=FALSE)
t.test(doses[[1]]$len,doses[[3]]$len,alternative="two.sided",var.equal=FALSE)
t.test(doses[[2]]$len,doses[[3]]$len,alternative="two.sided",var.equal=FALSE)
setwd("~/Documents/Coursera/practical_machine_learning/Week_4")
train <- read.csv('pml-training.csv')
test <- read.csv('pml-testing.csv')
head(train)
complete.cases(train)
sum(complete.cases(train))
sum(complete.cases(test))
dim(train)
head(train)
dim(train)
dim(test)
train <-train[,colSums(!is.na(train))]
test <-test[,colSums(!is.na(test))]
train <- read.csv("pml-training.csv", na.strings=c("NA", "#DIV/0!", ""), row.names = 1)
test <- read.csv("pml-testing.csv", na.strings=c("NA", "#DIV/0!", ""), row.names = 1)
train <-train[,colSums(!is.na(train))]
test <-test[,colSums(!is.na(test))]
train <-train[,colSums(!is.na(train))]
train <-train[,colSums(is.na(train)) == 0]
subsamples <- createDataPartition(y=train$classe, p=0.8, list=FALSE)
library(caret) #machine learning
library(lattice) #machine learning
library(kernlab) #machine learning
library(randomForest) #machine learning
library(ggplot2) #plotting
library(rpart) #trees
library(rpart.plot) #decision tree plot
library(rattle)
sum(complete.cases(train))
sum(complete.cases(test))
train <- read.csv("pml-training.csv", na.strings=c("NA", "#DIV/0!", ""), row.names = 1)
test <- read.csv("pml-testing.csv", na.strings=c("NA", "#DIV/0!", ""), row.names = 1)
train <-train[,colSums(is.na(train)) == 0]
test <-test[,colSums(is.na(test)) == 0]
sum(complete.cases(test))
sum(complete.cases(train))
indices <- createDataPartition(y=train$classe, p=0.8, list=FALSE)
Train <- train[indices, ]
Validation <- train[-indices, ]
table(Train$classe)
model_forests <- randomForest(classe ~. , data=Train, method="class")
prediction <- predict(model_forests, Validation, type = "class")
prediction_forest <- predict(model_forests, Validation, type = "class")
confusionMatrix(prediction_forest, Validation$classe)
prediction_forest_train <- predict(model_forests, Train, type = "class")
confusionMatrix(prediction_forest_train, Train$classe)
prediction_forest_test <- predict(model_forests, test, type = "class")
confusionMatrix(prediction_forest_test, test$classe)
names(test)
names(test) == names(Validation)
names(Validation)
test$classe
names(train) == names(test)
table(test$problem_id)
prediction_forest_test <- predict(model_forests, test, type = "class")
names(train) == names(test))
sum(train) == names(test))
sum((train) == names(test))
sum(names(train) == names(test))
prediction_forest_test <- predict(model_forests, test[, -"problem_id"], type = "class")
names(test[, -"problem_id"])
names(test[, -59])
prediction_forest_test <- predict(model_forests, test[, -59], type = "class")
names(train)
colnames(test)[59] <- "classe"
prediction_forest_test <- predict(model_forests, test, type = "class")
sum(names(train) == names(test))
colnames(test)[59] <- "problem_id"
head(train)
head(test)
train   <-train[,-c(1:6)]
test <-test[,-c(1:6)]
names(train_)
names(train)
indices <- createDataPartition(y=train$classe, p=0.8, list=FALSE)
Train <- train[indices, ]
Validation <- train[-indices, ]
model_forests <- randomForest(classe ~. , data=Train, method="class")
prediction_forest_test <- predict(model_forests, test, type = "class")
prediction_forest_test
prediction_forest <- predict(model_forests, Validation, type = "class")
confusionMatrix(prediction_forest, Validation$classe)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(prediction_forest_test)
write(prediction_forest_test, file = "problem_ids.txt",
ncolumns = if(is.character(x)) 1 else 5,
append = FALSE, sep = "\n")
write(prediction_forest_test, file = "problem_ids.txt", append = FALSE, sep = "\n")
write(prediction_forest_test, file = "problem_ids.txt", sep = "\n")
write.table(prediction_forest_test, file = "problem_ids.txt", append = FALSE, quote = TRUE, sep = "\n",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(prediction_forest_test, file = "problem_ids.txt", append = FALSE, quote = TRUE, sep = "\n",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(prediction_forest_test, file = "problem_ids.txt", append = FALSE, quote = TRUE, sep = "\n",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(prediction_forest_test, file = "problem_ids.txt", append = FALSE, quote = FALSE, sep = "\n",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"),
fileEncoding = "")
